#!/usr/bin/env node
const { Command } = require('commander');
const program = new Command();
import createXegoBlock from './index';
import { writeXegoToFile } from './xego-fs'; 
import gist from './gist';
const dotenv = require('dotenv');
dotenv.config();
const loading =  require('loading-cli');


interface Options {
    name: string;
    command: string;
    path: string;
    language: string;
    maxTokens: number;
    temperature: number;
}

if (!process.env.OPENAI_API_KEY) {
    throw new Error('OPENAI_API_KEY environment variable is not set');
}

const main = async (options: Options) => {
    try {
        const loader = loading(`fetching codex from openai and writing to file: xegos/${options.name ? options.name : options.command.split(' ').join('-')}`).start()
        const colors = ['red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white']
        /*
        This code is generating a random color from the colors array.
        - generated by stenography ðŸ¤–
        */
        loader.color = colors[Math.floor(Math.random() * colors.length)];
        loader.frames = ["â—°", "â—³", "â—²", "â—±"]
        /*
        This code creates a new Xego block.
        - generated by stenography ðŸ¤–
        */
        const xego = await createXegoBlock(
            options.name, 
            options.command, 
            options.path, 
            options.language, 
            Number(options.maxTokens), 
            Number(options.temperature)
        );
        await writeXegoToFile(xego);
        loader.stop()
    } catch (err) {
        throw err;
    }
}

program
    .command('new')
    .description('A command line tool for creating Xegos')
    .option('-n, --name <name>','Name of the Xego', null)
    .requiredOption('-c, --command <command>', 'Command for codex to execute')
    .option('-p, --path <path>', 'Path to Xego Tower', null)
    .option('-temp, --temperature <temperature>', 'Temperature of the Xego', 0.1)
    .option('-mt, --maxTokens <maxTokens>', 'Max number of tokens', 150)
    .option('-l, --language <language>', 'Language of the Xego. See supported languages at https://github.com/bramses/xegos/blob/master/file-endings.ts', 'js')
    .action(async (options) => {
        main(options);
    })
        

program
    .command('gist')
    .description('Create a gist from a Xego(s)')
    .requiredOption('-f --files <files>', 'An array of filenames seperated by spaces.')
    .requiredOption('-d --desc <desc>', 'Description of the gist')
    .action(async (options) => {
        const loader = loading(`creating a gist with files`).start()
        const colors = ['red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white']
        /*
        This code is generating a random color from the colors array.
        - generated by stenography ðŸ¤–
        */
        loader.color = colors[Math.floor(Math.random() * colors.length)];
        loader.frames = ["â—°", "â—³", "â—²", "â—±"]
        const files:string[] = options.files.split(' ');
        const desc:string = options.desc;
        const gistRes = await gist(desc, files);
        loader.stop();
        console.log(gistRes);
    });

program.parse(process.argv);


