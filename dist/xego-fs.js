"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.writeXegoToFile = exports.readXegoTxtFile = void 0;
// fetch the files that xegos exist in
var fs_1 = require("fs");
var file_endings_1 = require("./file-endings");
/*
This code is reading a text file and parsing the contents into a xego string.
- generated by stenography ðŸ¤–
*/
var readXegoTxtFile = function (path) { return __awaiter(void 0, void 0, void 0, function () {
    var xegoFile, xegoString, fileEnding, xegos, i, ll;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!path.endsWith(".txt")) {
                    throw new Error("Path must end with .txt");
                }
                return [4 /*yield*/, fs_1.promises.readFile(path, "utf8")];
            case 1:
                xegoFile = _a.sent();
                xegoString = '';
                fileEnding = '';
                xegos = xegoFile.split("\n");
                i = 0;
                _a.label = 2;
            case 2:
                if (!(i < xegos.length)) return [3 /*break*/, 6];
                if (!(i === 0)) return [3 /*break*/, 3];
                /*
                This code is checking to see what type the file ending is.
                Then it converts it to lowercase.
                - generated by stenography ðŸ¤–
                */
                fileEnding = file_endings_1["default"][xegos[i].split(":")[1].trim().toLowerCase()];
                return [3 /*break*/, 5];
            case 3: return [4 /*yield*/, fs_1.promises.readFile('xegos/' + xegos[i] + fileEnding, "utf8")];
            case 4:
                ll = _a.sent();
                xegoString += ll + "\n";
                _a.label = 5;
            case 5:
                i++;
                return [3 /*break*/, 2];
            case 6: return [2 /*return*/, xegoString];
        }
    });
}); };
exports.readXegoTxtFile = readXegoTxtFile;
var writeXegoToFile = function (xego) { return __awaiter(void 0, void 0, void 0, function () {
    var editedCode, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                /*
                creates a file with the name of the xego block and the file ending.
                uses xegoTower iff it exists.
                then writes out the contents of xego to a file in xegos/
                - generated by stenography ðŸ¤–
                */
                if (!fs_1.existsSync('xegos')) {
                    fs_1.mkdirSync('xegos');
                }
                editedCode = xego.xegoTower
                    ? xego.xegoTower + '\n\n' + xego.startComment + ' ' + xego.command + ' ' + xego.endComment + '\n\n' + xego.code
                    : xego.startComment + ' ' + xego.command + ' ' + xego.endComment + '\n\n' + xego.code;
                return [4 /*yield*/, fs_1.promises.writeFile(xego.name ? 'xegos/' + xego.name + xego.fileEnding : 'xegos/' + xego.command.split(' ').join('-') + xego.fileEnding, editedCode, 'utf8')];
            case 1:
                _a.sent();
                return [2 /*return*/, true];
            case 2:
                err_1 = _a.sent();
                throw err_1;
            case 3: return [2 /*return*/];
        }
    });
}); };
exports.writeXegoToFile = writeXegoToFile;
