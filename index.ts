const OpenAI = require('openai-api');
import * as dotenv from "dotenv";
dotenv.config();

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const openai = new OpenAI(OPENAI_API_KEY);

      /*
      This code is creating a function that takes in three parameters: command, legos, and language. 
      The command parameter will create the codex prompt. 
      The legos parameter loads code from other Lego pieces. 
      Finally, the language parameter is being used to tell codex what language to prefer.
      - generated by stenography ðŸ¤–
      */
const createLegoBlock = async (command: string, legos: string[] = [], language: string = 'Node JS'): Promise<any> => {
    const engine = 'davinci-codex'

                   /*
                   This code is checking to see if any lego building blocks were passed in. 
                   If so, it uses the legos in the prompt to create a lego block. 
                   If not, it just uses the command.
                   - generated by stenography ðŸ¤–
                   */
    const prompt = legos.length > 0 ? `Language: ${language}\n\n ${legos.join('\n')}\n\n /* ${command}` : `Language: ${language}\n\n /* ${command}`;
    const maxTokens = 100;
    const temperature = 0.5;
    const topP = 1
    const presencePenalty = 0
    const frequencyPenalty = 0
    const bestOf = 1
    const n = 1
    const stream = false
    const stop = ['/*']

                     
                     /*
                     This code is waiting for the OpenAI API to return a prompt completion.
                     - generated by stenography ðŸ¤–
                     */
    const response = await openai.complete({engine, prompt, maxTokens, temperature, topP, presencePenalty, frequencyPenalty, bestOf, n, stream, stop});
    console.log(response.data);
}

createLegoBlock("create a blog")