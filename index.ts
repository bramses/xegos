const OpenAI = require('openai-api');
import * as dotenv from "dotenv";
dotenv.config();
import { promises as fs } from "fs";
import fileEndings from "./file-endings";
import commentTypes from "./file-comment-types";

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const openai = new OpenAI(OPENAI_API_KEY);

interface Xego {
    name: string;
    command: string;
    code: string;
    fileEnding: string;
    startComment: string;
    endComment: string;
}

/*
This code is creating a function that takes in the name of a xego block, the command to build it, and an array of xegos. 
The language parameter will be set to Node JS if you are using NodeJS.
- generated by stenography ðŸ¤–
*/
const createXegoBlock = async (name: string = null, command: string, xegos: string[] = [], language: string = 'NodeJS'): Promise<Xego> => {
    try {
        const engine = 'davinci-codex'
    
                       /*
                       This code is checking to see if any xego building blocks were passed in. 
                       If so, it uses the xegos in the prompt to create a xego block. 
                       If not, it just uses the command.
                       - generated by stenography ðŸ¤–
                       */
        const prompt = xegos.length > 0 ? `Language: ${language}\n\n ${xegos.join('\n')}\n\n${commentTypes[language].start} ${command} ${commentTypes[language].end}` : `Language: ${language}\n\n ${commentTypes[language].start} ${command} ${commentTypes[language].end}`;
        const maxTokens = 200;
        const temperature = 0.01;
        const topP = 1
        const presencePenalty = 0
        const frequencyPenalty = 0
        const bestOf = 1
        const n = 1
        const stream = false
        const stop = [commentTypes[language].start]
    
        console.log(prompt);              
                         /*
                         This code is waiting for the OpenAI API to return a prompt completion.
                         - generated by stenography ðŸ¤–
                         */
        const response = await openai.complete({engine, prompt, maxTokens, temperature, topP, presencePenalty, frequencyPenalty, bestOf, n, stream, stop});
        console.log(response.data.choices[0].text.trim());
        return {
            name,
            command,
            code: response.data.choices[0].text.trim(),
            fileEnding: fileEndings[language],
            startComment: commentTypes[language].start,
            endComment: commentTypes[language].end
        }   
    } catch (err) {
        throw err;
    }
}


const writeXegoToFile = async (xego: Xego): Promise<any> => { 
    try {
        const editedCode = xego.startComment + ' ' + xego.command + ' ' + xego.endComment + '\n\n' + xego.code;
        await fs.writeFile(xego.name ? 'xegos/' + xego.name + xego.fileEnding : 'xegos/' + xego.command.split(' ').join('-') + xego.fileEnding, editedCode, 'utf8');
    } catch (err) {
        throw err;
    }
}

createXegoBlock("youtube-endpoint", "create a endpoint that fetches youtube videos", [], 'TypeScript').then(writeXegoToFile).catch(console.error);