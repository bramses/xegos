const OpenAI = require('openai-api');
import * as dotenv from "dotenv";
dotenv.config();
import * as fs from 'fs';

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const openai = new OpenAI(OPENAI_API_KEY);


/*
This code is creating a function that takes in the name of a Lego block, the command to build it, and an array of legos. The language parameter will be set to Node JS if you are using NodeJS.
- generated by stenography ðŸ¤–
*/
const createLegoBlock = async (name: string, command: string, legos: string[] = [], language: string = 'Node JS'): Promise<any> => {
    const engine = 'davinci-codex'

                   /*
                   This code is checking to see if any lego building blocks were passed in. 
                   If so, it uses the legos in the prompt to create a lego block. 
                   If not, it just uses the command.
                   - generated by stenography ðŸ¤–
                   */
    const prompt = legos.length > 0 ? `Language: ${language}\n\n ${legos.join('\n')}\n\n /* ${command} */` : `Language: ${language}\n\n /* ${command} */`;
    const maxTokens = 64;
    const temperature = 0.01;
    const topP = 1
    const presencePenalty = 0
    const frequencyPenalty = 0
    const bestOf = 1
    const n = 1
    const stream = false
    const stop = ['/*']

                     
                     /*
                     This code is waiting for the OpenAI API to return a prompt completion.
                     - generated by stenography ðŸ¤–
                     */
    const response = await openai.complete({engine, prompt, maxTokens, temperature, topP, presencePenalty, frequencyPenalty, bestOf, n, stream, stop});

    const legoStr = `const command:string = '${command}';\nconst lego:string = \`${response.data.choices[0].text.trim()}\`;\n\nconst language:string = '${language}';\n\nmodule.exports = { lego, command, language };
    `

    fs.writeFile(`${name}.ts`, legoStr, err => {
        if (err) {
          console.error(err)
          return
        }
        console.log(`Lego block ${name} created!`)
    });

}


createLegoBlock("youtube-endpoint", "create a endpoint that fetches youtube videos")