"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var OpenAI = require('openai-api');
var dotenv = require("dotenv");
dotenv.config();
var fs_1 = require("fs");
var OPENAI_API_KEY = process.env.OPENAI_API_KEY;
var openai = new OpenAI(OPENAI_API_KEY);
/*
This code is creating a function that takes in the name of a Lego block, the command to build it, and an array of legos. The language parameter will be set to Node JS if you are using NodeJS.
- generated by stenography ðŸ¤–
*/
var createLegoBlock = function (name, command, legos, language) {
    if (legos === void 0) { legos = []; }
    if (language === void 0) { language = 'Node JS'; }
    return __awaiter(void 0, void 0, void 0, function () {
        var engine, prompt_1, maxTokens, temperature, topP, presencePenalty, frequencyPenalty, bestOf, n, stream, stop_1, response, legoStr, fileCreated, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    engine = 'davinci-codex';
                    prompt_1 = legos.length > 0 ? "Language: " + language + "\n\n " + legos.join('\n') + "\n\n /* " + command + " */" : "Language: " + language + "\n\n /* " + command + " */";
                    maxTokens = 64;
                    temperature = 0.01;
                    topP = 1;
                    presencePenalty = 0;
                    frequencyPenalty = 0;
                    bestOf = 1;
                    n = 1;
                    stream = false;
                    stop_1 = ['/*'];
                    return [4 /*yield*/, openai.complete({ engine: engine, prompt: prompt_1, maxTokens: maxTokens, temperature: temperature, topP: topP, presencePenalty: presencePenalty, frequencyPenalty: frequencyPenalty, bestOf: bestOf, n: n, stream: stream, stop: stop_1 })];
                case 1:
                    response = _a.sent();
                    legoStr = "const command:string = '" + command + "';\nconst lego:string = `" + response.data.choices[0].text.trim() + "`;\n\nconst language:string = '" + language + "';\n\nmodule.exports = { lego, command, language };\n        ";
                    return [4 /*yield*/, fs_1.promises.writeFile(name + ".ts", legoStr)];
                case 2:
                    fileCreated = _a.sent();
                    console.log("Lego block " + fileCreated + " created!");
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
};
createLegoBlock("youtube-endpoint", "create a endpoint that fetches youtube videos");
